Robocar World Championship installation and usage notes.
Tested on Ubuntu 18.04 LTS.

Prerequisites
====================================
1. Install required libraries:

sudo apt-add-repository ppa:webupd8team/java
sudo apt-get update

sudo apt-get install gcc git autoconf autotools-dev libtool protobuf-compiler libprotobuf-dev libprotozero-dev g++ libboost-all-dev flex libexpat1-dev zlib1g-dev libbz2-dev libpthread-workqueue-dev libsparsehash-dev libgdal-dev libgeos++-dev libproj-dev doxygen graphviz xmlstarlet cmake oracle-java8-installer maven

export JAVA_HOME=/usr/lib/jvm/java-8-oracle

2. Install OSM-library:
git clone https://github.com/scrosby/OSM-binary.git
cd OSM-binary/
make -C src
sudo make -C src install
cd ..

3. Install Protozero:
git clone https://salsa.debian.org/debian-gis-team/protozero
cmake .
make
sudo make install
cd ..

4. Install libosmium:
git clone https://github.com/osmcode/libosmium.git
cd libosmium/
cmake .
make
sudo make install
cd include/
sudo cp -rf * /usr/include/
cd ..

Install
====================================
1. Install rcemu
git clone https://github.com/rbesenczi/Crowd-sourced-Traffic-Simulator.git
cd Crowd-sourced-Traffic-Simulator/justine/rcemu/
autoreconf --install
./configure
make

2. Install rcwin
cd ../rcwin
mvn clean compile package site assembly:assembly

3. Download a map file from OpenStreetMap.com and save it to justine/ folder.

Run in separate terminals
====================================
1. From rcemu (cd rcemu)
a) src/smartcity --node2gps=../lmap.txt
b) src/traffic
c) (sleep 1; echo "<init Norbi 100 g>"; sleep 1)|telnet localhost 10007
d) src/samplemyshmclient --team=Police
2. From rcwin (cd rcwin)
e) java -jar target/site/justine-rcwin-0.0.16-jar-with-dependencies.jar ../lmap.txt

Run replays (optional)
====================================
Make rclog project
cd rclog
mvn clean compile package site assembly:assembly
java -jar target/site/justine-car-window-0.0.10-jar-with-dependencies.jar ../lmap.txt ../rcemu/2018-Dec-04\ 20\:13\:15
(2nd argument is the logfile from previous a run)

====================================
Additional usage for testing the model described in paper Markov Stochastic Models for Analyzing Traffic Flow.
====================================

1. Download the dataset from https://www.kaggle.com/c/pkdd-15-predict-taxi-service-trajectory-i/data and save it to the ../model-sources folder as pkdd15-subset.csv.
2. Download the map of Porto from OpenStreetMap with the coordinates W8.6518, W8.5771, N41.1129, N41.1756 and save it to the ../model-sources folder as porto.osm.

3. Run filter_dataset.R code located in the ../model-sources folder (you will need R execution environment).
4. Run the create_markov_kernel.py file located in the ../model-sources folder (you will need a python execution environment).

5. Run the rcemu with the porto.osm map file and the porto_adj.edgelist kernel file. From rcemu (cd rcemu):
a) src/smartcity --node2gps=../lmap.txt --osm=../porto.osm --city=Porto --node2way=../way.txt --kernel=../../model-sources/corrected.edgelist
b) src/traffic --initt=DIST --minutes=10
2. From rcwin (cd rcwin)
e) java -jar target/site/justine-rcwin-0.0.16-jar-with-dependencies.jar ../lmap.txt

6. After the simulation over from the rcstat folder:
a) mvn clean compile package site assembly:assembly
b) java -jar target/site/justine-car-window-0.0.10-jar-with-dependencies.jar ../way.txt ../rcemu/2018-Dec-04\ 20\:13\:15
where ../rcemu/2018-Dec-04\ 20\:13\:15 is the logfile of the last simulation and 1min_file.txt will contain the frequency of cars per streets measured in every minute of the simulation.